-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsn ([stack, state, world], insn) {
  case insn of
  READ -> [fst (readWorld(world)):stack, state, snd (readWorld(world))]
  | WRITE -> [snd (stack), state, writeWorld (fst (stack), world)]
  | LD (s)     -> [state(s):stack, state, world]
  | ST (s)     -> case stack of s1:sn -> [sn, state <- [s, s1], world] esac
  | CONST (n)       -> [n:stack, state, world]
  | BINOP (op) -> case stack of r:l:right -> [evalOp(op, l, r):right, state, world] esac
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | x:xs -> eval(evalInsn(c, x), xs)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, left, right) -> compileExpr(left) +++ compileExpr(right) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (x, e)   -> compileExpr (e) +++ {ST (x)}
  | Seq   (st1, st2) -> compileSM (st1) +++ compileSM (st2) 
  | Read  (x)      -> {READ, ST (x)}
  | Write (e)      -> compileExpr (e) +++ {WRITE}
  esac
}